@page "/profile"
@inject NavigationManager Nav
@inject HttpClient Http
@using RecipeBookProject.Client.Services
@inject AuthenticationStateProvider AuthStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

            <AuthorizeView> 
                <Authorized>
<div class="container py-3">

    <!-- Basit profil kartı -->
    <div class="card mb-3">
        <div class="card-body d-flex align-items-center">
                    <img src="@(userDetails?.ProfileImageUrl ?? "https://picsum.photos/200")"
                         class="rounded-circle me-3"
                         style="width:72px;height:72px;object-fit:cover;" />            <div>
                        <h5 class="mb-1">@context.User.FindFirst(ClaimTypes.Name)?.Value @context.User.FindFirst(ClaimTypes.Surname)?.Value </h5>
                        <div class="text-muted small">@userDetails.Bio</div>
            </div>
        </div>
    </div>

    <div class="row g-3">
        <div class="col-md-6">
            <div class="card mb-3">
                <div class="card-body">
                    <h6 class="card-title">Bilgilerim</h6>
                    <div class="mb-2">Kaydedilen: <strong>@liste.Count</strong></div>
                            @if (!string.IsNullOrWhiteSpace(@userDetails.PersonalWebsite))
                    {
                                <div class="mb-2">Web: <a href="@userDetails.PersonalWebsite" target="_blank">@userDetails.PersonalWebsite</a></div>
                    }
                </div>
            </div>

            <div class="card">
                <div class="card-body">
                    <h6 class="card-title">Ayarlar</h6>
                    <div class="mb-2">
                        <label class="form-label">Bio</label>
                                <textarea class="form-control" rows="3" @bind="userDetails.Bio"></textarea>
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Avatar URL</label>
                                <input class="form-control" @bind="userDetails.ProfileImageUrl" />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Website (ops.)</label>
                                <input class="form-control" @bind="userDetails.PersonalWebsite" />
                    </div>
                    <button class="btn btn-primary" @onclick="Save">Kaydet</button>
                </div>
            </div>
        </div>

        <!-- Sağ kolon: tarif listesi -->
        <div class="col-md-6">
            <div class="card h-100">
                <div class="card-body">
                    <h6 class="card-title">Tariflerim</h6>

                    @if (liste.Count == 0)
                    {
                        <div class="text-muted small">Henüz kaydedilen tarif yok.</div>
                    }
                    else
                    {
                        <ul class="list-group list-group-flush">
                            @foreach (var r in liste)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span>@r.ProductName</span>
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => OpenRecipe(r.ProductId)">Aç</button>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
        </Authorized>
            </AuthorizeView> 
                
@code {
    List<ProductDto> liste = new List<ProductDto>();
    UserDetails userDetails = new UserDetails();
   
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        string? userId = null;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier).Value;
        }
        if (string.IsNullOrWhiteSpace(userId))
        {
            liste = new();
            //     return;

        }

        var response = await Http.GetFromJsonAsync<ApiResponse<List<ProductDto>>>($"api/Profile/getUserProfile?userid={Uri.EscapeDataString(userId ?? "")}");
        liste = response?.Data ?? new List<ProductDto>();
        var response2 = await Http.GetFromJsonAsync<ApiResponse<UserDetails>>($"api/Profile/GetUserDetails?userid={Uri.EscapeDataString(userId ?? "")}");
        userDetails = response2?.Data ?? new UserDetails();
    }

    void OpenRecipe(int id) => Nav.NavigateTo($"/recipe/{id}");

    // Fixes:
    // - Marked Save as async Task
    // - Used correct PostAsJsonAsync overload (url, value)
    // - Used UserDetails as the type for posting user details
    // - Removed unknown T and fixed generic usage
    async Task Save()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        string? userId = null;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier).Value;
        }
        
        // Assuming you want to update user details
        var post = await Http.PostAsJsonAsync($"api/Profile/UpdateProfileDetails?userid={Uri.EscapeDataString(userId ?? "")}", userDetails);
        StateHasChanged();
    }
}
