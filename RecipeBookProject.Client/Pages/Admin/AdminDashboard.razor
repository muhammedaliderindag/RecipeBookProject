@page "/admin"
@using System.Globalization
@using RecipeBookProject.Contracts.Common
@using RecipeBookProject.Contracts.Admin
@inject RecipeBookProject.Client.Services.AdminProductsService AdminSvc

<!-- Erişilebilirlik -->
<h1 class="visually-hidden">Yönetim Paneli</h1>

<div class="container-fluid p-3 p-lg-4 admin-wrap">
    <!-- Üst Başlık + Aksiyonlar -->
    <div class="d-flex flex-wrap gap-2 align-items-center mb-3">
        <div class="me-auto">
            <h2 class="h4 mb-1">Yönetim Paneli</h2>
            <div class="text-body-secondary small">
                Tarifler • Onay kuyruğu • Taslaklar • Şikayetler
            </div>
        </div>

        <button class="btn btn-outline-secondary" type="button"
                data-bs-toggle="offcanvas" data-bs-target="#filters">
            <i class="bi bi-funnel me-1"></i>Filtreler
        </button>

@*         <a class="btn btn-outline-primary" href="#">
            <i class="bi bi-clipboard-check me-1"></i>Onay Kuyruğu
        </a>

        <a class="btn btn-primary" href="#">
            <i class="bi bi-plus-lg me-1"></i>Yeni Tarif
        </a> *@
    </div>

    <!-- KPI Kartları -->
    <div class="row g-3 mb-3">
        @foreach (var kpi in Kpis)
        {
            <div class="col-12 col-sm-6 col-xl-3">
                <div class="card kpi-card h-100 shadow-sm">
                    <div class="card-body d-flex align-items-center gap-3">
                        <div class="iconwrap">
                            <i class="@kpi.Icon"></i>
                        </div>
                        <div class="flex-grow-1">
                            <div class="kpi-title text-body-secondary">@kpi.Title</div>
                            <div class="kpi-value">@kpi.Value.ToString("N0", CultureInfo.GetCultureInfo("tr-TR"))</div>
                            <div class="kpi-trend @((kpi.Trend >= 0) ? "up" : "down")">
                                <i class="bi @(kpi.Trend >= 0 ? "bi-arrow-up-right" : "bi-arrow-down-right") me-1"></i>
                                @Math.Abs(kpi.Trend).ToString("0.#")%
                                <span class="text-body-secondary ms-1">haftalık</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Grafik Bölümü (placeholder) -->
    <div class="row g-3 mb-3">
        <div class="col-12 col-xl-8">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-transparent d-flex align-items-center justify-content-between">
                    <span class="fw-medium">Haftalık Tarif Yayınları</span>
                    <div class="btn-group btn-group-sm">
                        <button class="btn btn-outline-secondary @(ChartDays==7?"active":"")" @onclick="() => SetChartRange(7)">7G</button>
                        <button class="btn btn-outline-secondary @(ChartDays==30?"active":"")" @onclick="() => SetChartRange(30)">30G</button>
                        <button class="btn btn-outline-secondary @(ChartDays==90?"active":"")" @onclick="() => SetChartRange(90)">90G</button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-area">
                        <svg viewBox="0 0 100 36" preserveAspectRatio="none" class="w-100 h-100">
                            <defs>
                                <linearGradient id="grad" x1="0" x2="0" y1="0" y2="1">
                                    <stop offset="0%" stop-color="var(--brand)" stop-opacity="0.35" />
                                    <stop offset="100%" stop-color="var(--brand)" stop-opacity="0" />
                                </linearGradient>
                            </defs>
                            <g stroke="currentColor" opacity=".1">
                                <line x1="0" y1="35" x2="100" y2="35" />
                                <line x1="0" y1="26" x2="100" y2="26" />
                                <line x1="0" y1="17" x2="100" y2="17" />
                                <line x1="0" y1="8" x2="100" y2="8" />
                            </g>
                            <path d="@AreaPath" fill="url(#grad)" />
                            <path d="@LinePath" fill="none" stroke="var(--brand)" stroke-width="1.5" />
                        </svg>
                    </div>
                    <div class="d-flex gap-3 small text-body-secondary mt-2">
                        <div><span class="legend-dot me-1"></span> Yayınlanan</div>
                        <div>Ort.: <span class="text-body fw-semibold">@ChartAvgPerWeek.ToString("0.#", CultureInfo.GetCultureInfo("tr-TR")) / hafta</span></div>
                        <div>Tepe: <span class="text-body fw-semibold">@ChartPeak</span></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Donut (placeholder) -->
        <div class="col-12 col-xl-4">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-transparent">
                    <span class="fw-medium">Kategori Dağılımı</span>
                </div>
                <div class="card-body">
                    <div class="donut-wrap mx-auto my-2">
                        <div class="donut"></div>
                        <div class="donut-center">
                            <div class="h6 mb-0">Toplam</div>
                            <div class="fw-bold">@(Dashboard?.TotalProducts.ToString("N0", CultureInfo.GetCultureInfo("tr-TR")) ?? "-")</div>
                        </div>
                    </div>
                    <ul class="list-unstyled small mb-0">
                        @if (Dashboard?.CategoryDistribution is { Count: > 0 })
                        {
                            var idx = 0;
                            foreach (var cd in Dashboard.CategoryDistribution.Take(4))
                            {
                                idx++;
                                <li class="d-flex align-items-center gap-2 mb-1">
                                    <span class="legend-swatch @(idx switch {1=>"sw1",2=>"sw2",3=>"sw3",_=>"sw4"})"></span>
                                    @cd.CategoryName <span class="ms-auto fw-semibold">@cd.Percent.ToString("0.#")%</span>
                                </li>
                            }
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Tablo & listeler -->
    <div class="row g-3">
        <div class="col-12 col-xxl-8">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-transparent d-flex align-items-center justify-content-between">
                    <span class="fw-medium">Onay Bekleyen Tarifler</span>

                    <div class="d-flex align-items-center gap-2">
                        <input class="form-control form-control-sm" style="width:220px" placeholder="Ara (isim/açıklama)"
                               @bind="Search" @bind:event="oninput" @onkeydown="OnSearchKeydown" />
                        <button class="btn btn-sm btn-outline-secondary" @onclick="ClearSearch">
                            <i class="bi bi-x-lg"></i>
                        </button>
@*                         <a href="#" class="small d-none d-sm-inline">Tümünü gör <i class="bi bi-arrow-right-short"></i></a>
 *@                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Tarif</th>
                                <th>Yazar</th>
                                <th>Tarih</th>
                                <th>Kategori</th>
                                <th class="text-center">Süre</th>
                                <th class="text-center">Durum</th>
                                <th class="text-end">İşlem</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (IsLoading)
                            {
                                <tr>
                                    <td colspan="7" class="text-center py-5">
                                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                                        Yükleniyor...
                                    </td>
                                </tr>
                            }
                            else if (Data.TotalCount == 0)
                            {
                                <tr>
                                    <td colspan="7" class="text-center py-4 text-body-secondary">
                                        Kayıt bulunamadı.
                                    </td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var r in Data.Items)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <img src="@r.ImageUrl" class="rounded me-2" style="width:36px;height:36px;object-fit:cover;" alt="">
                                                <div>
                                                    <div class="fw-medium">@r.ProductName</div>
                                                    <div class="text-body-secondary small">@r.ProductShortDesc</div>
                                                </div>
                                            </div>
                                        </td>
                                        <td>@r.Author</td>
                                        <td>@r.CreatedAt.ToString("dd.MM.yyyy")</td>
                                        <td>@r.CategoryName</td>
                                        <td class="text-center">@r.ProductionTime dk</td>
                                        <td class="text-center">
                                            @if (r.IsApproved)
                                            {
                                                <span class="badge text-bg-success-subtle border border-success-subtle text-black">Onaylı</span>
                                            }
                                            else
                                            {
                                                <span class="badge text-bg-warning-subtle border border-warning-subtle text-black">Bekliyor</span>
                                            }
                                        </td>

                                            <td class="text-end">
                                                <div class="btn-group btn-group-sm">
                                                @if (!r.IsApproved)
                                                {
                                                    <button class="btn btn-outline-success" disabled="@IsBusy" title="Onayla" @onclick="() => Approve(r.ProductId)">
                                                        <i class="bi bi-check2"></i>
                                                    </button>
                                                    }
                                                    @*                                                 <button class="btn btn-outline-warning" disabled="@IsBusy" title="Düzenle" @onclick="() => Edit(r.ProductId)">
                                                    <i class="bi bi-pencil"></i>
                                                </button> *@
                                                    <button class="btn btn-outline-danger" disabled="@IsBusy" title="Reddet" @onclick="() => Reject(r.ProductId)">
                                                        <i class="bi bi-x"></i>
                                                    </button>
                                                </div>
                                            </td>

                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>

                <div class="card-footer bg-transparent d-flex justify-content-between align-items-center">
                    <div class="small text-body-secondary">
                        @((Data.TotalCount == 0)
                                                ? "Kayıt yok"
                                                : $"{((Page - 1) * PageSize) + 1}–{Math.Min(Page * PageSize, Data.TotalCount)} / {Data.TotalCount}" )
                    </div>
                    <nav aria-label="Sayfalama">
                        <ul class="pagination pagination-sm mb-0">
                            <li class="page-item @(Page == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="Prev">Önceki</button>
                            </li>
                            @for (int p = 1; p <= TotalPages; p++)
                            {
                                <li class="page-item @(p == Page ? "active" : "")">
                                    <button class="page-link" @onclick="() => Go(p)">@p</button>
                                </li>
                            }
                            <li class="page-item @((Page >= TotalPages) ? "disabled" : "")">
                                <button class="page-link" @onclick="Next">Sonraki</button>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>

        <div class="col-12 col-xxl-4">
            <div class="card shadow-sm mb-3">
                <div class="card-header bg-transparent fw-medium">Raporlananlar</div>
                <div class="list-group list-group-flush">
                    @if (Reported.Count == 0)
                    {
                        <div class="list-group-item small text-body-secondary">Kayıt yok</div>
                    }
                    else
                    {
                        @foreach (var x in PagedReported())
                        {
                            <a href="#" class="list-group-item list-group-item-action d-flex align-items-start gap-2">
                                <i class="bi bi-flag text-danger mt-1"></i>
                                <div class="flex-grow-1">
                                    <div class="fw-medium">@x.Title</div>
                                    <div class="small text-body-secondary">@x.Reason</div>
                                </div>
                                <span class="badge text-bg-danger-subtle border border-danger-subtle">@x.Count</span>
                            </a>
                        }
                    }
                </div>
                <div class="card-footer bg-transparent d-flex justify-content-between align-items-center">
                    <button class="btn btn-sm btn-outline-secondary" @onclick="ReportPrev" disabled="@(ReportPage==1)">Önceki</button>
                    <div class="small text-body-secondary">@(((ReportPage-1)*ReportPageSize)+1)-@((Math.Min(ReportPage*ReportPageSize, Reported.Count))) / @Reported.Count</div>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="ReportNext" disabled="@(ReportPage*ReportPageSize>=Reported.Count)">Sonraki</button>
                </div>
            </div>

            <div class="card shadow-sm">
                <div class="card-header bg-transparent fw-medium">Son Yorumlar</div>
                <ul class="list-group list-group-flush">
                    @if (Comments.Count == 0)
                    {
                        <li class="list-group-item small text-body-secondary">Kayıt yok</li>
                    }
                    else
                    {
                        @foreach (var c in PagedComments())
                        {
                            <li class="list-group-item">
                                <div class="d-flex align-items-start gap-2">
                                    <img src="@c.Avatar" class="rounded-circle" style="width:28px;height:28px;object-fit:cover;" alt="">
                                    <div class="flex-grow-1">
                                        <div class="d-flex">
                                            <div class="fw-medium me-auto">@c.Author</div>
                                            <span class="text-body-secondary small">@c.Date.ToString("dd.MM.yyyy")</span>
                                        </div>
                                        <div class="small">@c.Text</div>
                                    </div>
                                </div>
                            </li>
                        }
                    }
                </ul>
                <div class="card-footer bg-transparent d-flex justify-content-between align-items-center">
                    <button class="btn btn-sm btn-outline-secondary" @onclick="CommentPrev" disabled="@(CommentPage==1)">Önceki</button>
                    <div class="small text-body-secondary">@(((CommentPage-1)*CommentPageSize)+1)-@((Math.Min(CommentPage*CommentPageSize, Comments.Count))) / @Comments.Count</div>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="CommentNext" disabled="@(CommentPage*CommentPageSize>=Comments.Count)">Sonraki</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Offcanvas Filtreler -->
<div class="offcanvas offcanvas-end" tabindex="-1" id="filters" aria-labelledby="filtersLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="filtersLabel">Filtreler</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Kapat"></button>
    </div>
    <div class="offcanvas-body">
        <div class="mb-3">
            <label class="form-label">Durum</label>
            <select class="form-select" @bind="Status">
                <option value="all">Tümü</option>
                <option value="pending">Onay Bekleyen</option>
                <option value="approved">Yayında</option>
            </select>
        </div>
        <div class="mb-3">
            <label class="form-label">Kategori</label>
            <input class="form-control" type="number" min="0" placeholder="Kategori Id (opsiyonel)" @bind="CategoryIdString" />
            <div class="form-text">Boş bırakılırsa tüm kategoriler.</div>
        </div>
        <div class="mb-3">
            <label class="form-label">Arama</label>
            <input class="form-control" placeholder="İsim veya kısa açıklama" @bind="Search" />
        </div>
        <div class="d-grid gap-2">
            <button class="btn btn-primary" @onclick="ApplyFilters">
                <i class="bi bi-search me-1"></i>Uygula
            </button>
            <button class="btn btn-outline-secondary" data-bs-dismiss="offcanvas" @onclick="ResetFilters">Temizle</button>
        </div>
    </div>
</div>

@code {
    // --- KPI demo (statik) ---
    record Kpi(string Title, int Value, double Trend, string Icon);
    List<Kpi> Kpis = new();

    // --- Dashboard verileri ---
    RecipeBookProject.Contracts.Admin.AdminDashboardDto? Dashboard;
    List<RecipeBookProject.Contracts.Admin.ReportedItemDto> Reported = new();
    List<RecipeBookProject.Contracts.Admin.CommentItemDto> Comments = new();
    // Paginations for side lists
    int ReportPage = 1, ReportPageSize = 10;
    int CommentPage = 1, CommentPageSize = 10;

    // --- Sunucu verisi ---
    PagedResult<AdminPendingProductDto> Data = new();
    int Page = 1, PageSize = 10, TotalPages = 1;

    // Filtre değişkenleri (API ile uyumlu)
    string Status = "pending";      // "pending" | "approved" | "all"
    int? CategoryId = null;
    string? Search = null;

    // UI yardımcıları
    bool IsLoading = false;
    bool IsBusy = false;

    // Offcanvas içindeki sayısal input için string köprü (nullable int ile binding sorunu yaşamamak için)
    string? CategoryIdString
    {
        get => CategoryId?.ToString();
        set
        {
            if (string.IsNullOrWhiteSpace(value)) CategoryId = null;
            else if (int.TryParse(value, out var v) && v >= 0) CategoryId = v;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    async Task Load()
    {
        IsLoading = true;
        StateHasChanged();

        // Servisten çek
        var dashTask = AdminSvc.GetDashboardAsync();
        var listTask = AdminSvc.GetAsync(Page, PageSize, Status, CategoryId, Search);
        await Task.WhenAll(dashTask, listTask);
        Dashboard = dashTask.Result;
        Data = listTask.Result;

        // KPI'ları doldur
        if (Dashboard is not null)
        {
            Kpis = new()
            {
                new("Toplam Tarif", Dashboard.TotalProducts, +0, "bi bi-book"),
                new("Onay Bekleyen", Dashboard.PendingCount, +0, "bi bi-hourglass-split"),
                new("Yorum", Dashboard.TotalComments, +0, "bi bi-chat-dots"),
                new("Şikayet", Dashboard.TotalReports, +0, "bi bi-flag")
            };
            Reported = Dashboard.ReportedTop;
            Comments = Dashboard.RecentComments;
            ComputeChartPaths();
        }

        // Sayfa sayısı
        TotalPages = Math.Max(1, (int)Math.Ceiling((double)Data.TotalCount / PageSize));

        IsLoading = false;
        StateHasChanged();
    }

    // --- Grafik için SVG path üretimi ---
    string AreaPath = string.Empty;
    string LinePath = string.Empty;
    int ChartDays = 7;
    double ChartAvgPerWeek = 0;
    int ChartPeak = 0;
    void ComputeChartPaths()
    {
        if (Dashboard?.WeeklyPublished is null || Dashboard.WeeklyPublished.Count == 0)
        {
            AreaPath = ""; LinePath = ""; return;
        }
        var cutoff = DateTime.UtcNow.Date.AddDays(-(ChartDays - 1));
        var points = Dashboard.WeeklyPublished.Where(x => x.Date >= cutoff).OrderBy(x => x.Date).ToList();
        int n = points.Count;
        double max = Math.Max(1, points.Max(p => (double)p.Count));
        ChartPeak = (int)max;
        // average per week on the selected window
        var total = points.Sum(p => p.Count);
        var weeks = ChartDays / 7.0;
        ChartAvgPerWeek = weeks <= 0 ? 0 : total / weeks;
        Func<int, double> xMap = i => n == 1 ? 100 : (100.0 * i / (n - 1));
        Func<int, double, double> yMap = (i, v) => 35 - (v / max) * 26; // top grid at ~9

        var path = new System.Text.StringBuilder();
        var line = new System.Text.StringBuilder();
        for (int i = 0; i < n; i++)
        {
            var x = xMap(i);
            var y = yMap(i, points[i].Count);
            if (i == 0)
            {
                path.Append($"M0,{y:0.##} ");
                line.Append($"M0,{y:0.##} ");
            }
            else
            {
                path.Append($"L{x:0.##},{y:0.##} ");
                line.Append($"L{x:0.##},{y:0.##} ");
            }
        }
        // close area to bottom
        path.Append(" L100,35 L0,35 Z");
        AreaPath = path.ToString();
        LinePath = line.ToString();
    }

    void SetChartRange(int days)
    {
        ChartDays = days;
        ComputeChartPaths();
        StateHasChanged();
    }

    IEnumerable<RecipeBookProject.Contracts.Admin.ReportedItemDto> PagedReported()
        => Reported.Skip((ReportPage - 1) * ReportPageSize).Take(ReportPageSize);
    IEnumerable<RecipeBookProject.Contracts.Admin.CommentItemDto> PagedComments()
        => Comments.Skip((CommentPage - 1) * CommentPageSize).Take(CommentPageSize);
    void ReportPrev() { if (ReportPage > 1) ReportPage--; }
    void ReportNext() { if (ReportPage * ReportPageSize < Reported.Count) ReportPage++; }
    void CommentPrev() { if (CommentPage > 1) CommentPage--; }
    void CommentNext() { if (CommentPage * CommentPageSize < Comments.Count) CommentPage++; }

    Task Go(int p)
    {
        Page = Math.Clamp(p, 1, TotalPages);
        return Load();
    }

    Task Prev() => Go(Page - 1);
    Task Next() => Go(Page + 1);

    async Task ApplyFilters()
    {
        Page = 1; // filtre değişince başa dön
        await Load();
    }

    async Task ResetFilters()
    {
        Status = "pending";
        CategoryId = null;
        Search = null;
        Page = 1;
        await Load();
    }

    async Task Approve(int id)
    {
        try
        {
            IsBusy = true;
            var resp = await AdminSvc.ApproveAsync(id);
            if (resp.IsSuccessStatusCode) await Load();
            // Başarısızsa burada toast/log ekleyebilirsin.
        }
        finally
        {
            IsBusy = false;
        }
    }

    Task Edit(int id)
    {
        // Burada detay sayfasına yönlendirme / drawer açma vs. yapılabilir.
        // NavigationManager.NavigateTo($"/admin/products/{id}");
        return Task.CompletedTask;
    }

    async Task Reject(int id)
    {
        try
        {
            IsBusy = true;
            var resp = await AdminSvc.RejectAsync(id);
            if (resp.IsSuccessStatusCode)
            {
                // Mevcut sayfada eleman azaldıysa gerekirse bir önceki sayfaya dön
                // (örn. son satırı sildiysen)
                if (Data.Items.Count == 1 && Page > 1)
                    Page--;

                await Load();
            }
        }
        finally
        {
            IsBusy = false;
        }
    }

    async Task OnSearchKeydown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Page = 1;
            await Load();
        }
    }

    void ClearSearch()
    {
        Search = null;
        _ = Load();
    }
}
